// ============================================================
// ğŸ§  AppDbContext.cs
// Bu sÄ±nÄ±f, Entity Framework Core (EF Core) altyapÄ±sÄ±nÄ± kullanarak
// uygulamanÄ±n veritabanÄ± baÄŸlantÄ±sÄ±nÄ± ve tablolarÄ±nÄ± (DbSet) tanÄ±mlar.
//
// GÃ¶rev:
//   - VeritabanÄ± baÄŸlantÄ±sÄ±nÄ± yÃ¶netmek
//   - User ve Message tablolarÄ±nÄ± temsil eden modelleri iliÅŸkilendirmek
//
// Bu context, Program.cs veya Startup.cs dosyasÄ±nda DI (Dependency Injection)
// aracÄ±lÄ±ÄŸÄ±yla yapÄ±landÄ±rÄ±lÄ±r.
// ============================================================

using Microsoft.EntityFrameworkCore;
using SentimentAPI.Models;

namespace SentimentAPI.Data
{
    public class AppDbContext : DbContext
    {
        // ------------------------------------------------------------
        // ğŸ”¹ Constructor
        // DI (Dependency Injection) sistemi aracÄ±lÄ±ÄŸÄ±yla gelen
        // DbContextOptions parametresi base sÄ±nÄ±fa aktarÄ±lÄ±r.
        // Bu parametre, veritabanÄ± baÄŸlantÄ± dizesi (connection string)
        // ve EF konfigÃ¼rasyonlarÄ±nÄ± iÃ§erir.
        // ------------------------------------------------------------
        public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

        // ------------------------------------------------------------
        // ğŸ”¹ DbSet TanÄ±mlarÄ±
        // Her DbSet, veritabanÄ±ndaki bir tabloyu temsil eder.
        // EF Core bu sÄ±nÄ±flarÄ± kullanarak CRUD iÅŸlemlerini otomatik yÃ¶netir.
        // ------------------------------------------------------------

        // ğŸ‘¤ Users tablosu: Sistemde mesaj gÃ¶nderen kullanÄ±cÄ±larÄ± tutar.
        public DbSet<User> Users { get; set; }

        // ğŸ’¬ Messages tablosu: Her bir mesajÄ± ve ona ait duygu analizini tutar.
        public DbSet<Message> Messages { get; set; }
    }
}
