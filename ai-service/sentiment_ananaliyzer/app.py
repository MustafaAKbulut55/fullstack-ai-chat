# ============================================================
# ğŸ§  SENTIMENT ANALYSIS MODEL (Gradio API)
# Bu dosya, kullanÄ±cÄ±dan gelen metinleri alarak
# CardiffNLP'nin RoBERTa tabanlÄ± modelini kullanÄ±r
# ve duygu analizini (Pozitif, Negatif, NÃ¶tr) yapar.
# 
# Gradio arayÃ¼zÃ¼ sayesinde hem web Ã¼zerinden test edilir
# hem de bir API endpoint olarak kullanÄ±labilir.
# ============================================================

import gradio as gr
from transformers import AutoTokenizer, AutoModelForSequenceClassification
import torch

# ------------------------------------------------------------
# ğŸ”¹ Model ve etiketlerin yÃ¼klenmesi
# CardiffNLP tarafÄ±ndan eÄŸitilen "twitter-roberta-base-sentiment-latest"
# modeli sosyal medya metinlerinde duygusal analiz iÃ§in optimize edilmiÅŸtir.
# ------------------------------------------------------------
MODEL_NAME = "cardiffnlp/twitter-roberta-base-sentiment-latest"
tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
model = AutoModelForSequenceClassification.from_pretrained(MODEL_NAME)
labels = ["Negative", "Neutral", "Positive"]

# ------------------------------------------------------------
# ğŸ”¹ Duygu Analizi Fonksiyonu
# Bu fonksiyon, kullanÄ±cÄ±dan gelen metni tokenleÅŸtirir,
# modeli Ã§alÄ±ÅŸtÄ±rÄ±r ve tahmini etiket ile olasÄ±lÄ±klarÄ± dÃ¶ner.
# ------------------------------------------------------------
def analyze_sentiment(text):
    # EÄŸer giriÅŸ boÅŸsa nÃ¶tr olarak iÅŸaretle
    if not text.strip():
        return "Neutral"
    
    # Metni modele uygun hale getir (tokenize et)
    inputs = tokenizer(text, return_tensors="pt", truncation=True)

    # Modeli deÄŸerlendirme modunda Ã§alÄ±ÅŸtÄ±r (gradyan hesaplanmaz)
    with torch.no_grad():
        outputs = model(**inputs)
        # Ã‡Ä±ktÄ±larÄ± softmax fonksiyonuyla olasÄ±lÄ±ÄŸa Ã§evir
        scores = torch.nn.functional.softmax(outputs.logits, dim=1)[0]

    # En yÃ¼ksek skoru alan etiketi belirle
    predicted_label = labels[torch.argmax(scores)]

    # Her sÄ±nÄ±fÄ±n yÃ¼zdelik skorunu oluÅŸtur
    score_dict = {labels[i]: round(float(scores[i]) * 100, 2) for i in range(len(labels))}

    # Sonucu metin formatÄ±nda dÃ¶ndÃ¼r
    return f"{predicted_label} | Scores â†’ {score_dict}"

# ------------------------------------------------------------
# ğŸ”¹ Gradio ArayÃ¼zÃ¼ (Blocks yapÄ±sÄ±)
# Gradio 4.36+ sÃ¼rÃ¼mÃ¼nde kullanÄ±lan yeni arayÃ¼z tipi.
# Bu yapÄ±, hem kullanÄ±cÄ± etkileÅŸimini hem de API tanÄ±mÄ±nÄ± iÃ§erir.
# ------------------------------------------------------------
with gr.Blocks() as demo:
    # BaÅŸlÄ±k
    gr.Markdown("## ğŸ§  3-Class Sentiment Analyzer (Positive / Neutral / Negative)")

    # KullanÄ±cÄ±dan giriÅŸ alÄ±nacak kutu
    text_in = gr.Textbox(label="Enter your text")

    # Tahmin sonucu burada gÃ¶sterilir
    result_out = gr.Textbox(label="Prediction result")

    # Tahmini baÅŸlatan buton
    analyze_btn = gr.Button("Analyze")

    # ğŸ”¸ analyze_sentiment fonksiyonunu buton tÄ±klamasÄ±na baÄŸla
    # AyrÄ±ca API endpoint olarak "analyze_sentiment" ismiyle kaydet
    analyze_btn.click(
        fn=analyze_sentiment,
        inputs=text_in,
        outputs=result_out,
        api_name="analyze_sentiment"  # ğŸš€ Bu isim, Gradio API Ã§aÄŸrÄ±larÄ±nda endpoint olarak kullanÄ±lÄ±r
    )

# ------------------------------------------------------------
# ğŸ”¹ Ana Ã§alÄ±ÅŸma bloÄŸu
# Uygulama baÅŸlatÄ±ldÄ±ÄŸÄ±nda Gradio servisini 0.0.0.0:7860 adresinde aÃ§ar.
# share=True sayesinde internet Ã¼zerinden test edilebilir bir link Ã¼retilir.
# ------------------------------------------------------------
if __name__ == "__main__":
    demo.launch(share=True, server_name="0.0.0.0", server_port=7860)
